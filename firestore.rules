rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Barillets collection
    match /barillets/{barilletId} {
      // Anyone can read any barillet (public read access)
      allow read: if true;

      // Users can create barillets with their own userId
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid;

      // Users can update their own barillets
      allow update: if isOwner(resource.data.userId)
                    && request.resource.data.userId == resource.data.userId;

      // Users can delete their own barillets
      allow delete: if isOwner(resource.data.userId);
    }

    // Folders collection
    match /folders/{folderId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(resource.data.userId);
    }

    // Categories collection
    match /categories/{categoryId} {
      // Allow reading all categories (global and user-specific)
      allow read: if isAuthenticated();

      // Allow creating categories
      allow create: if isAuthenticated()
                    && (request.resource.data.userId == request.auth.uid
                        || request.resource.data.userId == null);

      // Users can update their own categories
      allow update: if isOwner(resource.data.userId);

      // Users can delete their own categories
      allow delete: if isOwner(resource.data.userId);
    }
  }
}